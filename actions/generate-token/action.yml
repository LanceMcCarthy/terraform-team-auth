name: 'Terraform Generate Team Token'
description: 'Dynamically creates a short-lived Team Token that can be used with Terraform actions.'
author: 'Lance McCarthy'
branding:
  icon: 'user-check'
  color: 'green'
inputs:
  api-token:
    description: "An **organization** or **user** API token, see [Api Docs - Authentication](https://developer.hashicorp.com/terraform/cloud-docs/api-docs#authentication)"
    required: true
    default: ''
  team-id:
    description: "The id of the team (e.g. team-ABdgNT7rDDiBadPi3), can be found in the in URL of the team's page (app.terraform.io/app/[org-id]/settings/teams/[team-id])."
    required: true
    default: ''
  export:
    description: 'Enables or disables exporting the value to the TF_API_TOKEN environment variable.'
    required: false
    default: true
    type: boolean
outputs:
  team_token:
    description: "The requested Terraform team token (is also exported to TF_API_TOKEN env var)."
    value: ${{steps.bundle.outputs.team_token}}
  team_token_id:
    description: "The ID of the team token (is also exported to TF_API_TOKEN_ID env var)"
    value: ${{steps.bundle.outputs.team_token_id}}
  description:
    description: "The description used when requesting the team token."
    value: ${{steps.bundle.outputs.description}}
  createdat:
    description: "Timestamp when the token was created."
    value: ${{steps.bundle.outputs.createdat}}
  expiredat:
    description: "Timestamp of when the token expires."
    value: ${{steps.bundle.outputs.expiredat}}
runs:
  using: "composite"
  steps:
    - id: bundle
      shell: pwsh
      run: |
        $apiKey = "${{inputs.api-token}}"
        $teamId = "${{inputs.team-id}}"
        $exportEnabled = "${{inputs.export}}"

        echo 'Validing Inputs...'

        if ([string]::IsNullOrWhiteSpace($apiKey)) {
            echo 'Missing api-token - You must enter a value for the API token.'
            exit 1
        }

        if ([string]::IsNullOrWhiteSpace($teamId)) {
            echo 'Missing team-id - You must enter the name of the team for which you want a token generated.'
            exit 1
        }

        if ($exportEnabled -notin @($true, $false)) {
            echo 'The value for export must be a boolean (true or false).'
            exit 1
        }

        try {
            echo 'Preparing request headers and body...'

            $url = "https://app.terraform.io/api/v2/teams/$teamId/authentication-tokens"

            $headers = @{
                "Authorization" = "Bearer $apiKey"
                "Content-Type"  = "application/vnd.api+json"
            }

            $body = @{
              data = @{
                type = "authentication-tokens"
                attributes = @{
                  description = "GH Actions - $($env:GITHUB_REPOSITORY)"
                  "expired-at" = (Get-Date).AddHours(24).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
                }
              }
            } | ConvertTo-Json -Depth 5


            echo 'Sending POST Request to Terraform...'

            $response = Invoke-RestMethod -Method Post -Uri $url -Headers $headers -Body $body
            $tokenId     = $response.data.id
            $description = $response.data.attributes.description
            $createdat   = $response.data.attributes.'created-at'
            $expiredat   = $response.data.attributes.'expired-at'
            $teamToken   = $response.data.attributes.token

            # We set and mask the token to prevent it from being printed in the logs
            echo "::add-mask::$teamToken"

            echo 'Setting outputs...'
            echo "team_token=$teamToken" >> $env:GITHUB_OUTPUT
            echo "team_token_id=$tokenId" >> $env:GITHUB_OUTPUT
            echo "description=$description" >> $env:GITHUB_OUTPUT
            echo "createdat=$createdat" >> $env:GITHUB_OUTPUT
            echo "expiredat=$expiredat" >> $env:GITHUB_OUTPUT

            if ($exportEnabled -eq "true") {
                echo "Exporting TF_API_TOKEN environment variable..."
                echo "TF_API_TOKEN=$teamToken" >> $env:GITHUB_ENV
                echo "TF_API_TOKEN_ID=$tokenId" >> $env:GITHUB_ENV
            }
        }
        catch {
            echo "Error: $($_.Exception.Message)"
            exit 1
        }
